plot3d(datos,
col = rgb(datos[,1],datos[,2],datos[,3]))
# Agregar las flechas
segments3d(rbind(medias, eig1), col = "black", lwd = 8)
segments3d(rbind(medias, eig2), col = "black", lwd = 8)
### DIBUJAR EL GRÁFICO CON SUS EJES ###
plot3d(datos,
col = rgb(datos[,1],datos[,2],datos[,3]))
# Agregar las flechas
segments3d(rbind(medias, 0.3*eig1), col = "black", lwd = 8)
### DIBUJAR EL GRÁFICO CON SUS EJES EN LA MEDIA ###
### DIBUJAR EL GRÁFICO CON SUS EJES ###
datos1 = datos
nrow(datos)*0.1
### DIBUJAR EL GRÁFICO CON SUS EJES EN LA MEDIA ###
### DIBUJAR EL GRÁFICO CON SUS EJES ###
#datos1 = datos
datos = datos[sample(1;nrow(datos),nrow(datos)*0.1),]
### DIBUJAR EL GRÁFICO CON SUS EJES EN LA MEDIA ###
### DIBUJAR EL GRÁFICO CON SUS EJES ###
#datos1 = datos
datos = datos[sample(1:nrow(datos),nrow(datos)*0.1),]
plot3d(datos,
col = rgb(datos[,1],datos[,2],datos[,3]))
plot3d(datos,
col = rgb(datos[,1],datos[,2],datos[,3]))
# Agregar las flechas
segments3d(rbind(medias, 0.3*eig1), col = "black", lwd = 8)
segments3d(rbind(medias, eig2), col = "black", lwd = 8)
#datos1 = datos
datos = datos[sample(1:nrow(datos),nrow(datos)*0.1),]
plot3d(datos,
col = rgb(datos[,1],datos[,2],datos[,3]))
# Agregar las flechas
segments3d(rbind(medias, 0.1*eig1), col = "black", lwd = 8)
segments3d(rbind(medias, eig2), col = "black", lwd = 8)
# Punto de origen
punto <- c(1, 1, 1)
# Vector
vector <- c(2, 3, 4)
# Extremos del vector
extremo_positivo <- punto + vector
extremo_negativo <- punto - vector
# Crear un gráfico 3D vacío
open3d()
# Dibujar el vector desde el extremo negativo al extremo positivo
segments3d(rbind(extremo_negativo, extremo_positivo), col = "red", lwd = 2)
# Añadir el punto de origen
points3d(punto, col = "blue", size = 5)
# Etiquetar los extremos del vector y el punto de origen (opcional)
text3d(punto, text = "Origen", adj = c(-0.5, -0.5))
text3d(extremo_positivo, text = "Extremo Positivo", adj = c(-0.5, -0.5))
text3d(extremo_negativo, text = "Extremo Negativo", adj = c(-0.5, -0.5))
open3d()
segments3d(rbind(medias + eig1, medias - eig1), col = "black", lwd = 8)
open3d()
segments3d(rbind(medias + eig1, medias - eig1), col = "black", lwd = 8)
segments3d(rbind(medias + eig3, medias - eig3), col = "black", lwd = 8)
segments3d(rbind(medias + eig5, medias - eig6), col = "black", lwd = 8)
# Agregar las flechas
open3d()
segments3d(rbind(medias + eig1, medias - eig1), col = "black", lwd = 8)
segments3d(rbind(medias + eig3, medias - eig3), col = "black", lwd = 8)
segments3d(rbind(medias + eig5, medias - eig5), col = "black", lwd = 8)
#datos1 = datos
plot3d(datos,
col = rgb(datos[,1],datos[,2],datos[,3]))
# Agregar las flechas
open3d()
segments3d(rbind(medias + eig1, medias - eig1), col = "black", lwd = 8)
segments3d(rbind(medias + eig3, medias - eig3), col = "black", lwd = 8)
segments3d(rbind(medias + eig5, medias - eig5), col = "black", lwd = 8)
#datos1 = datos
plot3d(datos,
col = rgb(datos[,1],datos[,2],datos[,3]))
# Agregar las flechas
open3d()
segments3d(rbind(medias + eig1, medias - eig1), col = "black", lwd = 8)
segments3d(rbind(medias + eig3, medias - eig3), col = "black", lwd = 8)
segments3d(rbind(medias + eig5, medias - eig5), col = "black", lwd = 8)
#datos1 = datos
plot3d(datos,
col = rgb(datos[,1],datos[,2],datos[,3]))
# Agregar las flechas
segments3d(rbind(medias + eig1, medias - eig1), col = "black", lwd = 8)
segments3d(rbind(medias + eig3, medias - eig3), col = "black", lwd = 8)
segments3d(rbind(medias + eig5, medias - eig5), col = "black", lwd = 8)
# Agregar las flechas
segments3d(rbind(medias + eig1, medias - eig1), col = "black", lwd = 8)
segments3d(rbind(medias + eig3, medias - eig3), col = "black", lwd = 8)
segments3d(rbind(medias + eig5, medias - eig5), col = "black", lwd = 8)
### DIBUJAR EL GRÁFICO CON SUS EJES ###
plot3d(datos,
col = rgb(datos[,1],datos[,2],datos[,3]))
# Agregar las flechas
segments3d(rbind(origen + eig1,origen - eig1), col = "black", lwd = 5)
segments3d(rbind(origen + eig3,origen - eig3), col = "black", lwd = 5)
segments3d(rbind(origen + eig5,origen - eig5), col = "black", lwd = 5)
origen - eig1
### DIBUJAR EL GRÁFICO CON SUS EJES ###
plot3d(datos,
col = rgb(datos[,1],datos[,2],datos[,3]))
# Agregar las flechas
segments3d(rbind(0.2*(origen + eig1),origen - eig1), col = "black", lwd = 5)
### DIBUJAR EL GRÁFICO CON SUS EJES ###
plot3d(datos,
col = rgb(datos[,1],datos[,2],datos[,3]))
# Agregar las flechas
segments3d(rbind(0.2*(origen + eig1),(origen - eig1)*1.4), col = "black", lwd = 5)
### DIBUJAR EL GRÁFICO CON SUS EJES ###
plot3d(datos,
col = rgb(datos[,1],datos[,2],datos[,3]))
# Agregar las flechas
segments3d(rbind(0.1*(origen + eig1),(origen - eig1)*1.4), col = "black", lwd = 5)
segments3d(rbind(origen + eig3,origen - eig3), col = "black", lwd = 5)
segments3d(rbind(origen + eig5,origen - eig5), col = "black", lwd = 5)
datos = cbind.data.frame(R = as.vector(rojo),
G = as.vector(verde),
B = as.vector(azul))
### DIBUJAR EL GRÁFICO CON SUS EJES ###
plot3d(datos,
col = rgb(datos[,1],datos[,2],datos[,3]))
# Agregar las flechas
segments3d(rbind(0.1*(origen + eig1),(origen - eig1)*1.4), col = "black", lwd = 5)
segments3d(rbind(origen + eig3,origen - eig3), col = "black", lwd = 5)
segments3d(rbind(origen + eig5,origen - eig5), col = "black", lwd = 5)
### DIBUJAR EL GRÁFICO CON SUS EJES ###
plot3d(datos,
col = rgb(datos[,1],datos[,2],datos[,3]))
# Agregar las flechas
segments3d(rbind(0.1*(origen + eig1),(origen - eig1)*1.4), col = "black", lwd = 5)
segments3d(rbind( (origen + eig3)*0.5 ,(origen - eig3)*0.5), col = "black", lwd = 5)
### DIBUJAR EL GRÁFICO CON SUS EJES ###
plot3d(datos,
col = rgb(datos[,1],datos[,2],datos[,3]))
# Agregar las flechas
segments3d(rbind(0.1*(origen + eig1),(origen - eig1)*1.4), col = "black", lwd = 5)
segments3d(rbind( (origen + eig3)*0.5 ,(origen - eig3)*0.5), col = "black", lwd = 5)
segments3d(rbind((origen + eig5)*0.5,(origen - eig5)*0.5), col = "black", lwd = 5)
### DIBUJAR EL GRÁFICO CON SUS EJES ###
plot3d(datos,
col = rgb(datos[,1],datos[,2],datos[,3]))
# Agregar las flechas
segments3d(rbind(origen, 0.1*eig1), col = "black", lwd = 5)
segments3d(rbind(origen, 2*eig2), col = "black", lwd = 5)
segments3d(rbind(origen, 0.3*eig3), col = "black", lwd = 5)
segments3d(rbind(origen, 0.3*eig4), col = "black", lwd = 5)
segments3d(rbind(origen, 0.3*eig5), col = "black", lwd = 5)
segments3d(rbind(origen, 0.3*eig6), col = "black", lwd = 5)
### DIBUJAR EL GRÁFICO CON SUS EJES EN LA MEDIA ###
### DIBUJAR EL GRÁFICO CON SUS EJES ###
#datos1 = datos
plot3d(datos,
col = rgb(datos[,1],datos[,2],datos[,3]))
# Agregar las flechas
segments3d(rbind(medias + eig1, medias - eig1), col = "black", lwd = 8)
segments3d(rbind(medias + eig3, medias - eig3), col = "black", lwd = 8)
segments3d(rbind(medias + eig5, medias - eig5), col = "black", lwd = 8)
ME = t(datos) %*%A$vectors
A$vectors
dim(datos)
ME =  A$vectors%*%t(datos)
cor(ME)
ME[1:10,]
ME =  A$vectors%*%t(datos)
ME[1:10,]
dim(ME)
ME =  as.matrix(datos)%*%A$vectors
cor(ME)
var(ME)
eigen(var(datos))
rm(list=ls())
## Cargar librerias necesarias ##
library(png) # Libreria para leer PNG's
library(flextable)# LIbreria para hacer tablas bonitas
library(scatterplot3d) #gráficar en 3D
library(rsvg) # Manipular archivos SVG
library(jpeg) # Comprimir el SVG a JPEG
library(rgl) # OpenGL pero para R
### Cargando la imagen desde la ruta local
ruta = "imagenes/im2.jpg" # Ruta local de la imagen
imagen = readJPEG(ruta) # Descomponer la imagen en sus canales RGB
str(imagen) # EL archivo cargado es un CUBO de información
# Del cubo de información se extrae cada capa de color
rojo = imagen[ , ,1] # Extraer inf de  R
verde = imagen[ , ,2] # Extraer inf de G
azul = imagen[ , ,3] # Extraer inf de B
datos = cbind.data.frame(R = as.vector(rojo),
G = as.vector(verde),
B = as.vector(azul))
medias = apply(datos,2,mean);medias
rgb(medias[1],medias[2],medias[3])
# Obtener la matriz de varianzas y covarianzas
S = var(datos)
S
# Obtener la matriz de correlaciones
R = cor(datos)
# OBTENER LOS EIGENVALORES
# Obtener los eigen valores y los eigen vectores
A = eigen(var(datos))
# Paso 5: Calcular las proyecciones (scores)
scores <- round(as.matrix(datos) %*% A$vectors,3)
A
# OBTENER LOS EIGENVALORES
# Obtener los eigen valores y los eigen vectores
A = eigen(var(datos))
# Paso 5: Calcular las proyecciones (scores)
scores <- round(as.matrix(datos) %*% A$vectors,3)
# Primer nuevo eje
origen = c(0,0,0)
eig1 = A$vectors[,1]
eig2 = -eig1
# Segundo nuevo eje
eig3 = A$vectors[,2]
eig4 = -eig3
# Tercer nuevo eje
eig5 = A$vectors[,3]
eig6 = -eig5
### DIBUJAR EL GRÁFICO CON SUS EJES ###
plot3d(datos,
col = rgb(datos[,1],datos[,2],datos[,3]))
### DIBUJAR EL GRÁFICO CON SUS EJES ###
plot3d(datos,
col = rgb(datos[,1],datos[,2],datos[,3]))
# Agregar las flechas
segments3d(rbind(origen, 0.1*eig1), col = "black", lwd = 5)
segments3d(rbind(origen, 2*eig2), col = "black", lwd = 5)
segments3d(rbind(origen, 0.3*eig3), col = "black", lwd = 5)
segments3d(rbind(origen, 0.3*eig4), col = "black", lwd = 5)
segments3d(rbind(origen, 0.3*eig5), col = "black", lwd = 5)
segments3d(rbind(origen, 0.3*eig6), col = "black", lwd = 5)
# Añadir los ejes X, Y y Z
axes3d(edges = c("x--", "y--", "z--"), col = "black", nticks = 10, cex = 1)
### DIBUJAR EL GRÁFICO CON SUS EJES ###
plot3d(datos,
col = rgb(datos[,1],datos[,2],datos[,3]))
# Agregar las flechas
segments3d(rbind(origen, 0.1*eig1), col = "black", lwd = 5)
segments3d(rbind(origen, 2*eig2), col = "black", lwd = 5)
segments3d(rbind(origen, 0.3*eig3), col = "black", lwd = 5)
segments3d(rbind(origen, 0.3*eig4), col = "black", lwd = 5)
segments3d(rbind(origen, 0.3*eig5), col = "black", lwd = 5)
segments3d(rbind(origen, 0.3*eig6), col = "black", lwd = 5)
# Añadir los ejes X, Y y Z
axes3d(edges = c("x--", "y--", "z--"), col = "black", nticks = 10, cex = 1)
# Añadir una rejilla en los ejes
grid3d(c("x", "y", "z"))
open3d()
medias
plot3d(medias, type = "n")
pch3d(medias, pch = 3, col = black)
medias
plot3d(medias, type = "n")
pch3d(medias, pch = 3, col = black)
plot3d(x = 1,y = 2, z = 3, type = "n")
pch3d(x = 1,y = 2, z = 3, pch = 3, col = black)
plot3d(x = 1,y = 2, z = 3, type = "n")
pch3d(x = 1,y = 2, z = 3, pch = 3, col = "black")
### DIBUJAR EL GRÁFICO CON SUS EJES ###
plot3d(datos,
col = rgb(datos[,1],datos[,2],datos[,3]))
# Agregar las flechas
segments3d(rbind(origen, 0.1*eig1), col = "black", lwd = 5)
segments3d(rbind(origen, 2*eig2), col = "black", lwd = 5)
segments3d(rbind(origen, 0.3*eig3), col = "black", lwd = 5)
segments3d(rbind(origen, 0.3*eig4), col = "black", lwd = 5)
segments3d(rbind(origen, 0.3*eig5), col = "black", lwd = 5)
segments3d(rbind(origen, 0.3*eig6), col = "black", lwd = 5)
# Añadir los ejes X, Y y Z
axes3d(edges = c("x--", "y--", "z--"), col = "black", nticks = 10, cex = 1)
# Añadir una rejilla en los ejes
grid3d(c("x", "y", "z"))
rgl.snapshot("imagenes/TR1.png")
### DIBUJAR EL GRÁFICO CON SUS EJES EN LA MEDIA ###
### DIBUJAR EL GRÁFICO CON SUS EJES ###
#datos1 = datos
plot3d(datos,
col = rgb(datos[,1],datos[,2],datos[,3]))
# Agregar las flechas
segments3d(rbind(medias + eig1, medias - eig1), col = "black", lwd = 8)
segments3d(rbind(medias + eig3, medias - eig3), col = "black", lwd = 8)
segments3d(rbind(medias + eig5, medias - eig5), col = "black", lwd = 8)
rgl.snapshot("imagenes/TR1.png")
### DIBUJAR EL GRÁFICO CON SUS EJES ###
plot3d(datos,
col = rgb(datos[,1],datos[,2],datos[,3]))
# Agregar las flechas
segments3d(rbind(origen, 0.1*eig1), col = "black", lwd = 5)
segments3d(rbind(origen, 2*eig2), col = "black", lwd = 5)
segments3d(rbind(origen, 0.3*eig3), col = "black", lwd = 5)
segments3d(rbind(origen, 0.3*eig4), col = "black", lwd = 5)
segments3d(rbind(origen, 0.3*eig5), col = "black", lwd = 5)
segments3d(rbind(origen, 0.3*eig6), col = "black", lwd = 5)
# Añadir los ejes X, Y y Z
axes3d(edges = c("x--", "y--", "z--"), col = "black", nticks = 10, cex = 1)
# Añadir una rejilla en los ejes
grid3d(c("x", "y", "z"))
rgl.snapshot("imagenes/TR1.png")
### DIBUJAR EL GRÁFICO CON SUS EJES ###
#datos1 = datos
plot3d(datos,
col = rgb(datos[,1],datos[,2],datos[,3]))
# Agregar las flechas
segments3d(rbind(medias + eig1, medias - eig1), col = "black", lwd = 8)
segments3d(rbind(medias + eig3, medias - eig3), col = "black", lwd = 8)
segments3d(rbind(medias + eig5, medias - eig5), col = "black", lwd = 8)
# Añadir los ejes X, Y y Z
axes3d(edges = c("x--", "y--", "z--"), col = "black", nticks = 10, cex = 1)
# Añadir una rejilla en los ejes
grid3d(c("x", "y", "z"))
rgl.snapshot("imagenes/TR2.png")
# Calcular la matriz de varianzas y covarianzas de los nuevos componentes
SCORES  =  as.matrix(datos)%*%A$vectors
# Calcular la matriz de varianzas y covarianzas de los nuevos componentes
SCORES  =  as.matrix(datos)%*%A$vectors # datos X eigenvectores
mean(SCORES)
Smedias = apply(SCORES,2,mean)
Smedias
Svar = var(SCORES)
Svar
Svar = round(var(SCORES),4)
Svar
# Matriz de correlaciones
Scor  = round(cor(SCORES),4)
Scor
Scor  = round(cor(SCORES),3)
Scor
Scor  = round(cor(SCORES),10)
Scor
cor(SCORES)
# Matriz de correlaciones
Scor  = round(cor(SCORES),4)
Scor
#datos1 = datos
plot3d(SCORES,
col = rgb(SCORES[,1],SCORES[,2],SCORES[,3]))
sum(SCORES[,1] > 0)
sum(SCORES[,1]<0)
sum(SCORES[,2]<0)
sum(SCORES[,3]<0)
col = rgb(abs(SCORES[,1]),abs(SCORES[,2]),abs(SCORES[,3]))
plot3d(SCORES,
col = rgb(datos[,1],datos[,2],datos[,3]))
#### PROYECTAR LOS NUEVOS PUNTOS ####
#datos1 = datos
plot3d(SCORES,
col = rgb(datos[,1],datos[,2],datos[,3]),
xlab = "R", ylab = "G",zlab = "B")
#datos1 = datos
plot3d(SCORES,
col = rgb(datos[,1],datos[,2],datos[,3]),
xlab = "R", ylab = "G",zlab = "B")
# Añadir los ejes X, Y y Z
axes3d(edges = c("x--", "y--", "z--"), col = "black", nticks = 10, cex = 1)
# Añadir una rejilla en los ejes
grid3d(c("x", "y", "z"))
#datos1 = datos
plot3d(SCORES,
col = rgb(datos[,1],datos[,2],datos[,3]),
xlab = "R", ylab = "G",zlab = "B")
# Añadir los ejes X, Y y Z
axes3d(edges = c("x--", "y--", "z--"), col = "black", nticks = 10, cex = 1)
# Añadir una rejilla en los ejes
grid3d(c("x", "y", "z"))
#datos1 = datos
plot3d(SCORES,
col = rgb(datos[,1],datos[,2],datos[,3]),
xlab = "R", ylab = "G",zlab = "B")
# Añadir los ejes X, Y y Z
axes3d(edges = c("x--", "y--", "z--"), col = "black", nticks = 10, cex = 1)
# Añadir una rejilla en los ejes
grid3d(c("x", "y", "z"))
rgl.snapshot("imagenes/TR3.png")
rgl.snapshot("imagenes/TR3.png")
rgl.snapshot("TR3.png")
#datos1 = datos
plot3d(SCORES,
col = rgb(datos[,1],datos[,2],datos[,3]),
xlab = "R", ylab = "G",zlab = "B")
# Añadir los ejes X, Y y Z
axes3d(edges = c("x--", "y--", "z--"), col = "black", nticks = 10, cex = 1)
# Añadir una rejilla en los ejes
grid3d(c("x", "y", "z"))
rgl.snapshot("imagenes/TR3.png")
rgl.snapshot("imagenes/TR4.png")
knitr::opts_chunk$set(echo = TRUE,
eval = T,
message = F,
warning = F)
rm(list=ls())
# Cargar la imagen en R
## Cargar librerias necesarias ##
library(png) # Libreria para leer PNG's
library(flextable)# LIbreria para hacer tablas bonitas
library(scatterplot3d) #gráficar en 3D
library(rsvg) # Manipular archivos SVG
library(jpeg) # Comprimir el SVG a JPEG
library(rgl) # OpenGL pero para los gráficos en 3D
### Cargando la imagen desde la ruta local
ruta = "imagenes/im2.jpg" # Ruta local de la imagen
imagen = readJPEG(ruta) # Descomponer la imagen en sus canales RGB
str(imagen) # EL archivo cargado es un CUBO de información
# Extraer la información de sus componentes
# Del cubo de información se extrae cada capa de color
rojo = imagen[ , ,1] # Extraer inf de  R
verde = imagen[ , ,2] # Extraer inf de G
azul = imagen[ , ,3] # Extraer inf de B
# Comprimir esa info en un dataframe
datos = cbind.data.frame(R = as.vector(rojo),
G = as.vector(verde),
B = as.vector(azul))
dim(datos)
# Obtener su vector de medias
medias = apply(datos,2,mean);medias
flextable(medias)
flextable(as.data.frame(medias))
flextable(as.data.frame(t(medias)))
autofit(theme_box(flextable(as.data.frame(t(medias)))))
# Obtener la matriz de varianzas y covarianzas
S = var(datos)
S
library(corrplot)
corrplot(S)
corrplot(R)
# Obtener la matriz de correlaciones
R = cor(datos)
corrplot(R)
S
Si = as.data.frame(round(S,4))
Si
autofit(theme_box(flextable(Si)))
corrplot(M, method = 'square', addCoef.col = 'black', tl.pos = 'd',
cl.pos = 'n', col = COL2('BrBG'))
corrplot(R, method = 'square', addCoef.col = 'black', tl.pos = 'd',
cl.pos = 'n', col = COL2('BrBG'))
corrplot(R, method = 'square', addCoef.col = 'black', tl.pos = 'd',
cl.pos = 'n')
corrplot(R, method = 'square', addCoef.col = 'black', tl.pos = 'd')
# OBTENER LOS EIGENVALORES
# Obtener los eigen valores y los eigen vectores
A = eigen(var(datos))
A$values
A$values
autofit(theme_box(flextable(as.data.frame(A$values))))
eigenvalores = as.data.frame(A$values)
genvalores
eigenvalores = as.data.frame(A$values)
eigenvalores
eigenvalores = as.data.frame(eigenvalores = A$values)
eigenvalores = round(data.frame(eigenvalores = A$values),4)
eigenvalores
eigenvalores = round(data.frame(eigenvalores = t(A$values)),4)
autofit(theme_box(flextable( )))
eigenvalores = round(data.frame(eigenvalores = t(A$values)),4)
autofit(theme_box(flextable(eigenvalores)))
names(eigenvalores) = paste0("Eigen",1:3)
autofit(theme_box(flextable(eigenvalores)))
# Varianza explicada
sum(eigenvalores)
# Varianza explicada
round(eigenvalores/sum(eigenvalores),4)
# Varianza explicada
autofit(theme_box(flextable(round(eigenvalores/sum(eigenvalores),4))))
# Varianza explicada
autofit(theme_box(flextable(round(eigenvalores/sum(eigenvalores),4))))
### Eigenvectores
A$vectors
round(A$vectors,4)
as.data.frame(round(A$vectors,4))
### Eigenvectores
autofit(theme_box(flextable(as.data.frame(round(A$vectors,4)))))
### Eigenvectores
autofit(theme_box(flextable(as.data.frame(round(A$vectors,4)))))
# Obtener su vector de medias
medias = apply(datos,2,mean)
# Proyectarlo bonito
autofit(theme_box(flextable(as.data.frame(t(medias)))))
autofit(theme_box(autofit(data.frame(head(scores)))))
# Calculo de los escores con una multiplicación de matrices
scores <- round(as.matrix(datos) %*% A$vectors,3)
autofit(theme_box(autofit(data.frame(head(scores)))))
autofit(theme_box((as.data.frame(head(scores)))))
autofit(theme_box(flextable(as.data.frame(head(scores)))))
# Obtener su vector de medias
Smedias = apply(scores,2,mean)
# Proyectarlo bonito
autofit(theme_box(flextable(as.data.frame(t(Smedias)))))
# Obtener la matriz de varianzas y covarianzas
SS = var(scores)
SSi = as.data.frame(round(SS,4))
autofit(theme_box(flextable(SSi)))
# Obtener la matriz de correlaciones
SR = cor(scores)
corrplot(sR, method = 'square', addCoef.col = 'black', tl.pos = 'd')
# Obtener la matriz de correlaciones
SR = cor(scores)
corrplot(SR, method = 'square', addCoef.col = 'black', tl.pos = 'd')
# Obtener la matriz de correlaciones
SR = cor(scores)
SR
# Obtener la matriz de correlaciones
SR = round(cor(scores),4)
SR
corrplot(SR, method = 'square', addCoef.col = 'black', tl.pos = 'd')
# Obtener la matriz de correlaciones
SR = round(cor(scores),4)
SR
SR
corrplot(SR, method = 'square', addCoef.col = 'black', tl.pos = 'd')
corrplot(SR, method = 'square', addCoef.col = 'black')
rgb(0.5,0.5,0.5)
knitr::purl("Tarea2 Bueno.Rmd","Tarea 2 y 3.r",documentation = F)
